roscore - зарпус окружения ROS
rosrun <package> <node> - запуск NODE
rosmsg list - список всех доступных сообщений
rosmsg show <название сообщения> - отображение полей сообщения
source .../<workspace>/devel/setup.bash - инициализирует наш пакет, чтобы потом её можно было легче найти при rosrun
rossrv ... - для работы со всеми доступными сервисами
rosservis ... - для работы только с запущенными в настоящее время сервисами

Все выполняемые программы должны располагаться в пакетах, которые может вызывать ROS. Сами пакеты должны располагаться в папке src, которая в свою очередь находится в некоторой папке workspace.
catkin_init_workspace - из src
catkin_creat_pkg [имя пакета] [зависимости] - из src
catkin_make - компиляция проекта (workspace), вызывается из корневой директории workspace

Создание ноды
***
--	Создаем пакет
--	Правим в CMakeLists: #1 Добавляем executable
			     #2 Назначаем link_libraries
			     !!! Если необходимо чтобы скомпилировать <package2> раньше <package1> (например, нода <node_1> использует сообщения или сервисы из <package2>), или нода <node_1> из <package2> использует сервис или сообщения этого же пакета, то необходимо прописать:
			add_dependencies(<node1> <package2>_generate_messages_cpp)
--	В папке src созданного пакета добавляем файл с кодом
\/ \/ \/
ОБЯЗАТЕЛЬНО В КОДЕ на с++
	#include "ros/ros.h"  - библиотека основных команд
	int main(int argc, char **argv){
		ros::init(argc, argv, "<имя ноды по умолчанию>");
		ros::NodeHandle n;    - объект для управления нодой
		ros::spinOnce()  //  ros::spin();   - завершают все процессы
***

Создание собственных сообщений 
***
--	Создаем пакет без зависимостей
--	Правим в CMakeLists: #1 Указываем компоненты для сборки - std_msgs и message_generation
                             #2 Раскомментируем добавление файлов сообщений
                             #3 Раскомментируем зависимосит generate_messages от std_msgs
                             #4 Добавляем зависимость catkin от message_runtime
--	Правим в package: #1 Раскомментировать build_depend и run_depend
--	Создаем в папку msg в корне пакета
--	Создаем файл сообщения (Messag1.msg)
--	Прописываем типы переменных и их имена
***

Создание собственных сервисов
***
--	Создаем пакет с зависимостями message_generation и message_runtime
--	Правим в CMakeLists: #1 Указываем компоненты для сборки - std_msgs 
			     #2 Раскомментируем добавление файлов сервисов
			     #3 Раскомментируем зависимосит generate_messages от std_msgs
--	В package должны быть раскомментированы build_depend и run_depend
--	Создаем в папку srv в корне пакета
--	Создаем файл сообщения (Servis1.srv)
--	Прописываем типы отправляемых переменных и их имена. После --- типы ответных переменных и их имена
***
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Код для Publisher
-------->Для topic
		ros::Publisher *pub* = *n*.advertise<'тип сообщения'>("<имя топика, в который отправляем>", <буфер топика (1000)>) - создание типа для отправки сообщений в топик
		ros::Rate *loop_rate*(<количесто сообщений в секунду>)  #ипользуют в циклах для задания частоты
		...
		pub.publish(<переменная>) - отправка сообщения
		loop_rate.sleep() - ожидание для сохранении скорости
		...
-------->Для service, клиет
		ros::ServiceClient *client* = *n*.serviceClient<'тип сервиса'>("<сервис, в который отправляем>")
		...
		*srv*.request.<ячейка сервиса> - заполняем сервис для отправки, srv заранее созданный сервис
		...
		client.call(srv) - отправка сервиса, возращает true, если ответ пришёл
		srv.response.<ячейка ответа сервиса> - получаем определённый ответ
***********************************************************************************************************************************************************************************************************  Код для Subscriber
	!!! ros::this_node::getName() - для получения имени текущей ноды
-------->Для topic
		ros::Subscriber *sub* = n.subscribe("<топик, из которого читаем>", <буфер топика(1000)>, <ф-ия обработчик полученного>)
		#функция обработчик принимает в параметры константную ссылку на тип сообщения#
-------->Для service, сервер
		ros::ServiceServer service = n.advertiseService("<сервис, который читаем>", <ф-ия обработчик, возращиет bool>)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
